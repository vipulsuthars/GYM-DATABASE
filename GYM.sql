---CREATION OF DATABASE---

CREATE DATABASE GYM
USE GYM

---STRUCTURE OF TABLES---

CREATE TABLE MEMBERSHIPS
(
MEMBERSHIP_ID VARCHAR(5) PRIMARY KEY,
MEMBERSHIP_PLAN VARCHAR(25) UNIQUE,
MEMBERSHIP_PRICE BIGINT NOT NULL,
DURATION VARCHAR(15) NOT NULL
)	
SELECT * FROM MEMBERSHIPS

CREATE TABLE EMPLOYEES
(
EMPLOYEE_ID VARCHAR(5) PRIMARY KEY,
EMPLOYEE_NAME VARCHAR(50) NOT NULL,
DESIGNATION VARCHAR(50),
CONTACT BIGINT UNIQUE,
SALARY BIGINT,
HIREDATE DATE,
IN_TIME VARCHAR(20),
OUT_TIME VARCHAR(20)
)
SELECT * FROM EMPLOYEES
	
CREATE TABLE ENQUIRIES
(
ENQUIRY_ID VARCHAR(50) PRIMARY KEY,
ENQUIRY_NAME VARCHAR(35) NOT NULL,
ENQUIRY_DATE DATE NOT NULL,
ENQUIRY_TYPE VARCHAR(50) NOT NULL,
ENQUIRY_STATUS VARCHAR(20) CHECK (Enquiry_STATUS='YES' OR Enquiry_STATUS='NO')
)
SELECT * FROM ENQUIRIES

CREATE TABLE PAYMENTS
(
PAYMENT_ID VARCHAR(5) PRIMARY KEY,
PAYMENT_METHOD VARCHAR(20) NOT NULL,
PAYMENT_DATE DATE NOT NULL,
CUSTOMER_NAME VARCHAR(20) NOT NULL,
ENQUIRY_ID VARCHAR(50),
FOREIGN KEY (ENQUIRY_ID) REFERENCES ENQUIRIES(ENQUIRY_ID)
)
SELECT * FROM PAYMENTS

CREATE TABLE CUSTOMERS
(
CUSTOMER_ID VARCHAR(5) PRIMARY KEY,
CUSTOMER_NAME VARCHAR(50) NOT NULL,
CONTACT_NUMBER BIGINT UNIQUE,
MEMBERSHIP_TYPE VARCHAR(25) NOT NULL,
JOIN_DATE DATE,
MEMBERSHIP_ID VARCHAR(5),
ENQUIRY_ID VARCHAR(50),
FOREIGN KEY (MEMBERSHIP_ID) REFERENCES MEMBERSHIPS(MEMBERSHIP_ID),
FOREIGN KEY (Enquiry_ID) REFERENCES ENQUIRIES(Enquiry_ID)
)
SELECT * FROM CUSTOMERS

CREATE TABLE REFUNDS
(
REFUND_ID VARCHAR(5) PRIMARY KEY,
CUSTOMER_NAME VARCHAR(20) NOT NULL,
JOIN_DATE DATE NOT NULL,
REFUND_DATE DATE NOT NULL,
REFUND_AMOUNT BIGINT NOT NULL,
REFUND_STATUS VARCHAR(20) CHECK (REFUND_STATUS='Completed' OR REFUND_STATUS='Pending'),
ENQUIRY_ID VARCHAR(5),
FOREIGN KEY (ENQUIRY_ID) REFERENCES ENQUIRIES(ENQUIRY_ID)
)
SELECT * FROM REFUNDS

CREATE TABLE UPGRADES
(
UPGRADE_ID VARCHAR(5) PRIMARY KEY,
UPGRADE_DATE DATE NOT NULL,
JOIN_DATE DATE NOT NULL,
NEW_MEMBERSHIP_PLAN VARCHAR(20) NOT NULL,
CUSTOMER_NAME VARCHAR(50) NOT NULL,
CUSTOMER_ID VARCHAR(5),
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
MEMBERSHIP_ID VARCHAR(5),
FOREIGN KEY (MEMBERSHIP_ID) REFERENCES MEMBERSHIPS(MEMBERSHIP_ID)
)
SELECT * FROM UPGRADES


---QUERY OF GYM DATABASE---

---ENQUERY OF INFORMATION---
SELECT * FROM ENQUIRIES
SELECT * FROM ENQUIRIES WHERE STATUS = 'YES'

---SHOW REFUND CASE DETAILS---
SELECT * FROM REFUNDS
SELECT * FROM REFUNDS WHERE REFUND_STATUS = 'COMPLETED'
SELECT * FROM REFUNDS WHERE REFUND_STATUS = 'PENDING'
SELECT COUNT(REFUND_STATUS) AS TOTAL_REFUND FROM REFUNDS WHERE REFUND_STATUS = 'COMPLETED'
SELECT COUNT(REFUND_STATUS) AS TOTAL_PRNDING FROM REFUNDS WHERE REFUND_STATUS = 'PENDING'

---MONTH ON MONTH NUMBER OF INQUIRIES INFORMATION---
SELECT MONTH(ENQUIRY_DATE) AS MONTH,COUNT(*) AS NUMBER_OF_INQURIRES  FROM ENQUIRIES GROUP BY MONTH(ENQUIRY_DATE) ORDER BY Month
SELECT MONTH(ENQUIRY_DATE) AS MONTH,ENQUIRY_TYPE,COUNT(*) AS NUMBER_OF_INQURIRES  FROM ENQUIRIES GROUP BY MONTH(ENQUIRY_DATE),ENQUIRY_TYPE ORDER BY Month

---CONVERSION RATE OF INQUIRIES INTO MEMBERSHIP SHOW AS A PERCENTAGE---
SELECT MONTH(ENQUIRY_DATE) AS MONTH,COUNT(*) AS TOTAL_INQURIRES,
COUNT(CASE WHEN STATUS = 'YES' THEN 1 END) AS CONVERSIONS,
CASE WHEN COUNT(*) = 0 THEN 0 
ELSE (COUNT(CASE WHEN STATUS = 'YES' THEN 1 END) * 1.0 / COUNT(*)) * 100 END AS PERCENTAGE 
FROM ENQUIRIES GROUP BY MONTH(ENQUIRY_DATE) ORDER BY MONTH;

---THE END---